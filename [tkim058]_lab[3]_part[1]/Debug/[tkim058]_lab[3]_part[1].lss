
[tkim058]_lab[3]_part[1].elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000240  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000887  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007bd  00000000  00000000  00000bd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000035c  00000000  00000000  00001390  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000016ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000439  00000000  00000000  00001740  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000076  00000000  00000000  00001b79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001bef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	ac d0       	rcall	.+344    	; 0x202 <main>
  aa:	c8 c0       	rjmp	.+400    	; 0x23c <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <Tick>:
#include <avr/io.h>
enum States{Start, Init, Wait1, Pressed1, Wait2, Pressed2}state;
unsigned char tmpB;

void Tick()
{
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
	
switch(state)
  b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ba:	88 2f       	mov	r24, r24
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	82 30       	cpi	r24, 0x02	; 2
  c0:	91 05       	cpc	r25, r1
  c2:	c9 f0       	breq	.+50     	; 0xf6 <Tick+0x48>
  c4:	83 30       	cpi	r24, 0x03	; 3
  c6:	91 05       	cpc	r25, r1
  c8:	2c f4       	brge	.+10     	; 0xd4 <Tick+0x26>
  ca:	00 97       	sbiw	r24, 0x00	; 0
  cc:	61 f0       	breq	.+24     	; 0xe6 <Tick+0x38>
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	71 f0       	breq	.+28     	; 0xee <Tick+0x40>
  d2:	55 c0       	rjmp	.+170    	; 0x17e <Tick+0xd0>
  d4:	84 30       	cpi	r24, 0x04	; 4
  d6:	91 05       	cpc	r25, r1
  d8:	81 f1       	breq	.+96     	; 0x13a <Tick+0x8c>
  da:	84 30       	cpi	r24, 0x04	; 4
  dc:	91 05       	cpc	r25, r1
  de:	e4 f0       	brlt	.+56     	; 0x118 <Tick+0x6a>
  e0:	05 97       	sbiw	r24, 0x05	; 5
  e2:	e1 f1       	breq	.+120    	; 0x15c <Tick+0xae>
  e4:	4c c0       	rjmp	.+152    	; 0x17e <Tick+0xd0>
{
	case Start: 
	state =Init;break;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  ec:	4b c0       	rjmp	.+150    	; 0x184 <Tick+0xd6>
	case Init:
	state = Wait1;break;
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  f4:	47 c0       	rjmp	.+142    	; 0x184 <Tick+0xd6>
	case Wait1:
	state = (PINA & 0x01) ? Pressed1 : state; break;
  f6:	80 e2       	ldi	r24, 0x20	; 32
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	fc 01       	movw	r30, r24
  fc:	80 81       	ld	r24, Z
  fe:	88 2f       	mov	r24, r24
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	81 70       	andi	r24, 0x01	; 1
 104:	99 27       	eor	r25, r25
 106:	89 2b       	or	r24, r25
 108:	19 f4       	brne	.+6      	; 0x110 <Tick+0x62>
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 10e:	01 c0       	rjmp	.+2      	; 0x112 <Tick+0x64>
 110:	83 e0       	ldi	r24, 0x03	; 3
 112:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 116:	36 c0       	rjmp	.+108    	; 0x184 <Tick+0xd6>
	case Pressed1:
	state = (!(PINA & 0x01))? Wait2 : state; break;
 118:	80 e2       	ldi	r24, 0x20	; 32
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	fc 01       	movw	r30, r24
 11e:	80 81       	ld	r24, Z
 120:	88 2f       	mov	r24, r24
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	81 70       	andi	r24, 0x01	; 1
 126:	99 27       	eor	r25, r25
 128:	89 2b       	or	r24, r25
 12a:	19 f0       	breq	.+6      	; 0x132 <Tick+0x84>
 12c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 130:	01 c0       	rjmp	.+2      	; 0x134 <Tick+0x86>
 132:	84 e0       	ldi	r24, 0x04	; 4
 134:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 138:	25 c0       	rjmp	.+74     	; 0x184 <Tick+0xd6>
	case Wait2:
	state = (PINA & 0x01) ? Pressed2 : state; break;
 13a:	80 e2       	ldi	r24, 0x20	; 32
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	fc 01       	movw	r30, r24
 140:	80 81       	ld	r24, Z
 142:	88 2f       	mov	r24, r24
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	81 70       	andi	r24, 0x01	; 1
 148:	99 27       	eor	r25, r25
 14a:	89 2b       	or	r24, r25
 14c:	19 f4       	brne	.+6      	; 0x154 <Tick+0xa6>
 14e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 152:	01 c0       	rjmp	.+2      	; 0x156 <Tick+0xa8>
 154:	85 e0       	ldi	r24, 0x05	; 5
 156:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 15a:	14 c0       	rjmp	.+40     	; 0x184 <Tick+0xd6>
	case Pressed2:
	state = (!(PINA & 0x01))? Wait1 : state; break;
 15c:	80 e2       	ldi	r24, 0x20	; 32
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	fc 01       	movw	r30, r24
 162:	80 81       	ld	r24, Z
 164:	88 2f       	mov	r24, r24
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	81 70       	andi	r24, 0x01	; 1
 16a:	99 27       	eor	r25, r25
 16c:	89 2b       	or	r24, r25
 16e:	19 f0       	breq	.+6      	; 0x176 <Tick+0xc8>
 170:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 174:	01 c0       	rjmp	.+2      	; 0x178 <Tick+0xca>
 176:	82 e0       	ldi	r24, 0x02	; 2
 178:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 17c:	03 c0       	rjmp	.+6      	; 0x184 <Tick+0xd6>
	default:
	state = Start;
 17e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	break;
 182:	00 00       	nop
}
switch(state)
 184:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 188:	88 2f       	mov	r24, r24
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	82 30       	cpi	r24, 0x02	; 2
 18e:	91 05       	cpc	r25, r1
 190:	79 f1       	breq	.+94     	; 0x1f0 <Tick+0x142>
 192:	83 30       	cpi	r24, 0x03	; 3
 194:	91 05       	cpc	r25, r1
 196:	2c f4       	brge	.+10     	; 0x1a2 <Tick+0xf4>
 198:	00 97       	sbiw	r24, 0x00	; 0
 19a:	61 f1       	breq	.+88     	; 0x1f4 <Tick+0x146>
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	51 f0       	breq	.+20     	; 0x1b4 <Tick+0x106>
	case Wait2: break;
	case Pressed2:
	tmpB = 0x01;
	PORTB = tmpB;
	break;
	default: break;
 1a0:	2c c0       	rjmp	.+88     	; 0x1fa <Tick+0x14c>
	state = (!(PINA & 0x01))? Wait1 : state; break;
	default:
	state = Start;
	break;
}
switch(state)
 1a2:	84 30       	cpi	r24, 0x04	; 4
 1a4:	91 05       	cpc	r25, r1
 1a6:	41 f1       	breq	.+80     	; 0x1f8 <Tick+0x14a>
 1a8:	84 30       	cpi	r24, 0x04	; 4
 1aa:	91 05       	cpc	r25, r1
 1ac:	6c f0       	brlt	.+26     	; 0x1c8 <Tick+0x11a>
 1ae:	05 97       	sbiw	r24, 0x05	; 5
 1b0:	a9 f0       	breq	.+42     	; 0x1dc <Tick+0x12e>
	case Wait2: break;
	case Pressed2:
	tmpB = 0x01;
	PORTB = tmpB;
	break;
	default: break;
 1b2:	23 c0       	rjmp	.+70     	; 0x1fa <Tick+0x14c>
}
switch(state)
{
	case Start: break;
	case Init:
	tmpB = 0x01;
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpB>
	PORTB = tmpB;
 1ba:	85 e2       	ldi	r24, 0x25	; 37
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <tmpB>
 1c2:	fc 01       	movw	r30, r24
 1c4:	20 83       	st	Z, r18
	break;
 1c6:	19 c0       	rjmp	.+50     	; 0x1fa <Tick+0x14c>
	case Wait1: break;
	case Pressed1:
	tmpB = 0x02;
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpB>
	PORTB = tmpB;
 1ce:	85 e2       	ldi	r24, 0x25	; 37
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <tmpB>
 1d6:	fc 01       	movw	r30, r24
 1d8:	20 83       	st	Z, r18
	case Wait2: break;
 1da:	0e c0       	rjmp	.+28     	; 0x1f8 <Tick+0x14a>
	case Pressed2:
	tmpB = 0x01;
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpB>
	PORTB = tmpB;
 1e2:	85 e2       	ldi	r24, 0x25	; 37
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <tmpB>
 1ea:	fc 01       	movw	r30, r24
 1ec:	20 83       	st	Z, r18
	break;
 1ee:	05 c0       	rjmp	.+10     	; 0x1fa <Tick+0x14c>
	case Start: break;
	case Init:
	tmpB = 0x01;
	PORTB = tmpB;
	break;
	case Wait1: break;
 1f0:	00 00       	nop
 1f2:	03 c0       	rjmp	.+6      	; 0x1fa <Tick+0x14c>
	state = Start;
	break;
}
switch(state)
{
	case Start: break;
 1f4:	00 00       	nop
 1f6:	01 c0       	rjmp	.+2      	; 0x1fa <Tick+0x14c>
	break;
	case Wait1: break;
	case Pressed1:
	tmpB = 0x02;
	PORTB = tmpB;
	case Wait2: break;
 1f8:	00 00       	nop
	tmpB = 0x01;
	PORTB = tmpB;
	break;
	default: break;
}
}
 1fa:	00 00       	nop
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <main>:
int main(void)
{
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	cd b7       	in	r28, 0x3d	; 61
 208:	de b7       	in	r29, 0x3e	; 62
 DDRA = 0x00; PORTA = 0xFF;	//set PORTA to inputs
 20a:	81 e2       	ldi	r24, 0x21	; 33
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	fc 01       	movw	r30, r24
 210:	10 82       	st	Z, r1
 212:	82 e2       	ldi	r24, 0x22	; 34
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	2f ef       	ldi	r18, 0xFF	; 255
 218:	fc 01       	movw	r30, r24
 21a:	20 83       	st	Z, r18
 DDRB = 0xFF; PORTB = 0x00;	//set PORTB to outputs
 21c:	84 e2       	ldi	r24, 0x24	; 36
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	2f ef       	ldi	r18, 0xFF	; 255
 222:	fc 01       	movw	r30, r24
 224:	20 83       	st	Z, r18
 226:	85 e2       	ldi	r24, 0x25	; 37
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	fc 01       	movw	r30, r24
 22c:	10 82       	st	Z, r1

 state = Start;              //initialize state var
 22e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 tmpB = 0x01;                   //initialize tmpB var
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpB>

 while (1) {
	 Tick();                 //call tick()
 238:	3a df       	rcall	.-396    	; 0xae <Tick>
 }
 23a:	fe cf       	rjmp	.-4      	; 0x238 <main+0x36>

0000023c <_exit>:
 23c:	f8 94       	cli

0000023e <__stop_program>:
 23e:	ff cf       	rjmp	.-2      	; 0x23e <__stop_program>
